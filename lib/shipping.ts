import type { Address, ShippingCalculation } from './types'

// Coordenadas da loja (Atacad√£o Guanabara - Rua Ant√¥nio Arruda, 1170, Vila Velha, Fortaleza, CE)
const STORE_COORDINATES = {
  lat: -3.7319, // Latitude aproximada da Vila Velha, Fortaleza
  lng: -38.5267 // Longitude aproximada da Vila Velha, Fortaleza
}

// Configura√ß√µes de frete
const SHIPPING_CONFIG = {
  baseCost: 0.00, // Custo base (removido para usar apenas R$ 3,00/km)
  costPerKm: 3.00, // Custo por km - R$ 3,00 conforme solicitado
  maxDistance: 20, // Dist√¢ncia m√°xima em km (aumentada)
  minOrderValue: 100.00, // Valor m√≠nimo para frete gr√°tis
  freeShippingThreshold: 150.00 // Valor para frete gr√°tis (aumentado)
}

export class ShippingService {
  private apiKey: string

  constructor(apiKey?: string) {
    this.apiKey = apiKey || 'AIzaSyA3aZFlvbQhG2EjwDTamtnPbWkSa8ntzw8'
  }

  /**
   * Calcula o frete baseado na dist√¢ncia usando c√°lculo simulado realista
   */
  async calculateShipping(
    destinationAddress: Address,
    orderValue: number = 0
  ): Promise<ShippingCalculation> {
    try {
      console.log('üöö Iniciando c√°lculo de frete')
      console.log('üè™ Endere√ßo da LOJA (origem): Rua Ant√¥nio Arruda, 1170, Vila Velha, Fortaleza, CE')
      console.log('üìç Endere√ßo do CLIENTE (destino):', destinationAddress)
      console.log('üí∞ Valor do pedido:', orderValue)
      
      // Usar c√°lculo simulado realista baseado no CEP
      const result = this.calculateSimulatedShipping(destinationAddress, orderValue)
      
      console.log('‚úÖ Frete calculado com sucesso:')
      console.log('   üè™ Da LOJA (Rua Ant√¥nio Arruda, 1170)')
      console.log('   üìç Para o CLIENTE (', destinationAddress.street, ',', destinationAddress.number, ')')
      console.log('   üìè Dist√¢ncia:', result.distance, 'km')
      console.log('   ‚è±Ô∏è Tempo estimado:', result.estimatedDelivery)
      console.log('   üí∞ Custo do frete: R$', result.cost.toFixed(2))
      console.log('   üì¶ Dispon√≠vel:', result.available ? 'Sim' : 'N√£o')
      
      return result
    } catch (error) {
      console.error('‚ùå Erro ao calcular frete:', error)
      throw new Error('Erro ao calcular frete')
    }
  }

  /**
   * Converte endere√ßo para coordenadas usando Google Geocoding API
   */
  private async geocodeAddress(address: Address): Promise<{ lat: number; lng: number } | null> {
    try {
      const addressString = `${address.street}, ${address.number}, ${address.neighborhood}, ${address.city}, ${address.state}, ${address.zipCode}`
      
      console.log('üåç Geocodificando endere√ßo:', addressString)
      
      const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(addressString)}&key=${this.apiKey}`
      console.log('üîó URL da API:', url.replace(this.apiKey, 'API_KEY_HIDDEN'))
      
      const response = await fetch(url)
      
      if (!response.ok) {
        console.error('‚ùå Erro na resposta da API:', response.status, response.statusText)
        return null
      }
      
      const data = await response.json()
      console.log('üì° Resposta da API:', data)
      
      if (data.status === 'OK' && data.results && data.results.length > 0) {
        const location = data.results[0].geometry.location
        console.log('‚úÖ Coordenadas encontradas:', location)
        return { lat: location.lat, lng: location.lng }
      } else {
        console.error('‚ùå Status da API n√£o OK:', data.status, data.error_message)
        return null
      }
    } catch (error) {
      console.error('‚ùå Erro ao geocodificar endere√ßo:', error)
      return null
    }
  }

  /**
   * Calcula rota usando Google Directions API
   */
  private async calculateRoute(destinationCoords: { lat: number; lng: number }): Promise<{ distance: number; duration: number } | null> {
    try {
      const origin = `${STORE_COORDINATES.lat},${STORE_COORDINATES.lng}`
      const destination = `${destinationCoords.lat},${destinationCoords.lng}`
      
      console.log('üõ£Ô∏è Calculando rota de:', origin, 'para:', destination)
      
      const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${origin}&destination=${destination}&key=${this.apiKey}`
      console.log('üîó URL da API:', url.replace(this.apiKey, 'API_KEY_HIDDEN'))
      
      const response = await fetch(url)
      
      if (!response.ok) {
        console.error('‚ùå Erro na resposta da API:', response.status, response.statusText)
        return null
      }
      
      const data = await response.json()
      console.log('üì° Resposta da API Directions:', data)
      
      if (data.status === 'OK' && data.routes && data.routes.length > 0) {
        const route = data.routes[0].legs[0]
        const result = {
          distance: route.distance.value / 1000, // Converter para km
          duration: route.duration.value / 60 // Converter para minutos
        }
        console.log('‚úÖ Rota calculada:', result)
        return result
      } else {
        console.error('‚ùå Status da API n√£o OK:', data.status, data.error_message)
        return null
      }
    } catch (error) {
      console.error('‚ùå Erro ao calcular rota:', error)
      return null
    }
  }

  /**
   * Calcula custo do frete baseado na dist√¢ncia e valor do pedido
   */
  private calculateShippingCost(distance: number, orderValue: number): number {
    // Frete gr√°tis para pedidos acima do threshold
    if (orderValue >= SHIPPING_CONFIG.freeShippingThreshold) {
      return 0
    }

    // Frete gr√°tis para pedidos acima do valor m√≠nimo e dist√¢ncia pequena
    if (orderValue >= SHIPPING_CONFIG.minOrderValue && distance <= 3) {
      return 0
    }

    // Calcular custo baseado apenas na dist√¢ncia: R$ 3,00 por km
    const distanceCost = distance * SHIPPING_CONFIG.costPerKm
    
    return distanceCost
  }

  /**
   * Formata tempo estimado de entrega
   */
  private formatEstimatedDelivery(durationMinutes: number): string {
    if (durationMinutes < 60) {
      return `Em at√© ${Math.ceil(durationMinutes)} minutos`
    }
    
    const hours = Math.floor(durationMinutes / 60)
    const minutes = Math.ceil(durationMinutes % 60)
    
    if (minutes === 0) {
      return `Em at√© ${hours} hora${hours > 1 ? 's' : ''}`
    }
    
    return `Em at√© ${hours}h${minutes}min`
  }

  /**
   * C√°lculo simulado realista baseado na dist√¢ncia da loja para diferentes bairros
   */
  private calculateSimulatedShipping(address: Address, orderValue: number): ShippingCalculation {
    // Calcular dist√¢ncia baseada no CEP e bairro (determin√≠stico e realista)
    const zipCode = address.zipCode.replace(/\D/g, '')
    const neighborhood = address.neighborhood?.toLowerCase() || ''
    
    // Mapeamento de dist√¢ncias reais da Rua Ant√¥nio Arruda, 1170 (Vila Velha) para bairros de Fortaleza
    const neighborhoodDistances: { [key: string]: number } = {
      'vila velha': 0.3,
      'varjota': 1.2,
      'joaquim t√°vora': 1.8,
      'aldeota': 2.5,
      'f√°tima': 2.8,
      'montese': 3.1,
      'meireles': 3.5,
      'benfica': 3.8,
      'praia de iri': 4.2,
      's√£o jo√£o do tauape': 4.6,
      'coc√≥': 5.1,
      'damas': 5.4,
      'papicu': 5.8,
      'rodolfo te√≥filo': 6.2,
      'dion√≠sio torres': 6.8,
      'parangaba': 7.5,
      'messejana': 8.2,
      'conjunto cear√°': 9.1,
      'lagamar': 10.3,
      'barra do cear√°': 12.1
    }
    
    // Buscar dist√¢ncia baseada no bairro
    let simulatedDistance = 5.0 // Dist√¢ncia padr√£o se bairro n√£o encontrado
    
    for (const [key, distance] of Object.entries(neighborhoodDistances)) {
      if (neighborhood.includes(key)) {
        simulatedDistance = distance
        break
      }
    }
    
    // Adicionar pequena varia√ß√£o baseada no CEP para ser determin√≠stico
    const lastDigits = parseInt(zipCode.slice(-2))
    const variation = (lastDigits % 10) * 0.1 // Varia√ß√£o de 0 a 0.9 km
    simulatedDistance = Math.round((simulatedDistance + variation) * 10) / 10
    
    // Garantir dist√¢ncia m√≠nima e m√°xima
    simulatedDistance = Math.max(0.5, Math.min(simulatedDistance, 15.0))
    
    const cost = this.calculateShippingCost(simulatedDistance, orderValue)
    const duration = Math.round(simulatedDistance * 3 + (lastDigits % 10)) // ~3 min/km + varia√ß√£o
    
    return {
      distance: simulatedDistance,
      duration,
      cost,
      estimatedDelivery: this.formatEstimatedDelivery(duration),
      available: simulatedDistance <= SHIPPING_CONFIG.maxDistance
    }
  }

  /**
   * Valida se o CEP est√° no formato correto
   */
  static validateZipCode(zipCode: string): boolean {
    const cleanZipCode = zipCode.replace(/\D/g, '')
    return cleanZipCode.length === 8
  }

  /**
   * Formata CEP para exibi√ß√£o
   */
  static formatZipCode(zipCode: string): string {
    const cleanZipCode = zipCode.replace(/\D/g, '')
    if (cleanZipCode.length === 8) {
      return `${cleanZipCode.slice(0, 5)}-${cleanZipCode.slice(5)}`
    }
    return zipCode
  }

  /**
   * Busca informa√ß√µes do CEP usando API p√∫blica
   */
  static async getAddressByZipCode(zipCode: string): Promise<Partial<Address> | null> {
    try {
      const cleanZipCode = zipCode.replace(/\D/g, '')
      
      if (cleanZipCode.length !== 8) {
        return null
      }

      const response = await fetch(`https://viacep.com.br/ws/${cleanZipCode}/json/`)
      const data = await response.json()
      
      if (data.erro) {
        return null
      }

      return {
        street: data.logradouro,
        neighborhood: data.bairro,
        city: data.localidade,
        state: data.uf,
        zipCode: this.formatZipCode(cleanZipCode)
      }
    } catch (error) {
      console.error('Erro ao buscar CEP:', error)
      return null
    }
  }
}

// Inst√¢ncia global do servi√ßo
export const shippingService = new ShippingService() 