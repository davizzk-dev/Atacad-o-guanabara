import { NextRequest, NextResponse } from 'next/server'
import { promises as fs } from 'fs'
import path from 'path'

export async function POST(request: NextRequest) {
  try {
    console.log('üîê API Google Login: Iniciando...')
    
    const body = await request.json()
    const { name, email, image } = body
    
    console.log('üìù Dados recebidos:', { name, email, image })
    
    // Verificar se os dados necess√°rios est√£o presentes
    if (!name || !email) {
      console.error('‚ùå Dados obrigat√≥rios faltando')
      return NextResponse.json({ 
        success: false, 
        error: 'Nome e email s√£o obrigat√≥rios' 
      }, { status: 400 })
    }
    
    // Ler dados existentes
    const dataDir = path.join(process.cwd(), 'data')
    const usersFilePath = path.join(dataDir, 'users.json')
    
    console.log('üìÅ Caminho do arquivo:', usersFilePath)
    
    let usersData = []
    try {
      const fileContent = await fs.readFile(usersFilePath, 'utf-8')
      usersData = JSON.parse(fileContent)
      console.log('üë• Usu√°rios existentes:', usersData.length)
    } catch (readError) {
      console.error('‚ö†Ô∏è Erro ao ler arquivo, criando novo:', readError)
      usersData = []
    }
    
    // Verificar se o usu√°rio j√° existe
    const existingUser = usersData.find((user: any) => user.email === email)
    
    if (existingUser) {
      console.log('‚úÖ Usu√°rio j√° existe:', existingUser.name)
      return NextResponse.json({ 
        success: true, 
        message: 'Usu√°rio j√° existe',
        user: existingUser
      })
    }
    
    // Criar novo usu√°rio Google
    const newUser = {
      id: Date.now().toString(),
      name: name,
      email: email,
      phone: '',
      password: '',
      role: 'user',
      createdAt: new Date().toISOString(),
      isGoogleUser: true,
      image: image || '',
      orders: 0
    }
    
    console.log('üÜï Novo usu√°rio Google criado:', newUser)
    
    // Adicionar ao array de usu√°rios
    usersData.push(newUser)
    
    // Salvar no arquivo
    try {
      await fs.writeFile(usersFilePath, JSON.stringify(usersData, null, 2), 'utf-8')
      console.log('üíæ Usu√°rio salvo com sucesso no JSON')
      
      return NextResponse.json({ 
        success: true, 
        message: 'Usu√°rio Google salvo com sucesso',
        user: newUser
      })
    } catch (writeError) {
      console.error('‚ùå Erro ao salvar usu√°rio:', writeError)
      return NextResponse.json({ 
        success: false, 
        error: 'Erro ao salvar usu√°rio: ' + (writeError as Error).message 
      }, { status: 500 })
    }
    
  } catch (error) {
    console.error('‚ùå Erro na API Google Login:', error)
    return NextResponse.json({ 
      success: false, 
      error: 'Erro interno do servidor: ' + (error as Error).message 
    }, { status: 500 })
  }
} 