// Script Async Varejo F√°cil - Web Scraping
const fs = require('fs').promises;
const path = require('path');

// Configura√ß√µes
const BASE_URL = 'https://atacadaoguanabara.varejofacil.com';
const API_KEY = '2625e98175832a17a954db9beb60306a';
const USERNAME = 'Guilherme';
const PASSWORD = '6952';

// Headers que simulam um navegador real
const BROWSER_HEADERS = {
  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
  'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
  'Accept-Encoding': 'gzip, deflate, br',
  'DNT': '1',
  'Connection': 'keep-alive',
  'Upgrade-Insecure-Requests': '1',
  'Sec-Fetch-Dest': 'document',
  'Sec-Fetch-Mode': 'navigate',
  'Sec-Fetch-Site': 'none',
  'Sec-Fetch-User': '?1',
  'Cache-Control': 'max-age=0'
};

// Vari√°vel para armazenar cookies de sess√£o
let sessionCookies = '';

// Fun√ß√£o para fazer login e obter sess√£o
async function getSession() {
  console.log('üîê === OBTENDO SESS√ÉO ===');
  
  try {
    // 1. Acessar a p√°gina inicial
    console.log('üìÑ Acessando p√°gina inicial...');
    const homeResponse = await fetch(`${BASE_URL}/`, {
      method: 'GET',
      headers: BROWSER_HEADERS,
      redirect: 'manual'
    });

    // Extrair cookies da resposta inicial
    const setCookieHeader = homeResponse.headers.get('set-cookie');
    if (setCookieHeader) {
      sessionCookies = setCookieHeader;
      console.log('üç™ Cookies iniciais obtidos');
    }

    // 2. Acessar p√°gina de login
    console.log('üîê Acessando p√°gina de login...');
    const loginPageResponse = await fetch(`${BASE_URL}/app/#/login`, {
      method: 'GET',
      headers: {
        ...BROWSER_HEADERS,
        'Cookie': sessionCookies
      },
      redirect: 'manual'
    });

    // Atualizar cookies se necess√°rio
    const loginSetCookie = loginPageResponse.headers.get('set-cookie');
    if (loginSetCookie) {
      sessionCookies = loginSetCookie;
      console.log('üç™ Cookies de login atualizados');
    }

    console.log('‚úÖ Sess√£o obtida com sucesso');
    return true;

  } catch (error) {
    console.error('‚ùå Erro ao obter sess√£o:', error.message);
    return false;
  }
}

// Fun√ß√£o para fazer web scraping de p√°ginas
async function scrapePage(endpoint) {
  const url = `${BASE_URL}${endpoint}`;
  
  try {
    console.log(`üåê Fazendo scraping: ${url}`);
    
    const headers = {
      ...BROWSER_HEADERS,
      'Cookie': sessionCookies
    };

    const response = await fetch(url, {
      method: 'GET',
      headers,
      redirect: 'manual'
    });

    console.log(`üìä Status: ${response.status}`);

    if (response.ok) {
      const text = await response.text();
      console.log(`üìÑ HTML recebido (${text.length} chars)`);
      
      // Extrair dados do HTML
      const extractedData = extractDataFromHTML(text);
      if (extractedData) {
        return { success: true, data: extractedData };
      }
    } else {
      console.log(`‚ùå HTTP ${response.status}`);
    }
  } catch (error) {
    console.error(`‚ùå Erro: ${error.message}`);
  }
  
  return { success: false };
}

// Fun√ß√£o para extrair dados do HTML
function extractDataFromHTML(html) {
  console.log('üîç Tentando extrair dados do HTML...');
  
  // Procurar por diferentes padr√µes de dados
  const patterns = [
    // Padr√µes comuns de dados JSON
    /window\.__INITIAL_STATE__\s*=\s*({.*?});/,
    /window\.products\s*=\s*(\[.*?\]);/,
    /window\.catalog\s*=\s*(\[.*?\]);/,
    /window\.inventory\s*=\s*(\[.*?\]);/,
    /window\.data\s*=\s*({.*?});/,
    /window\.app\s*=\s*({.*?});/,
    
    // Padr√µes de atributos data
    /data-products\s*=\s*"([^"]+)"/,
    /data-catalog\s*=\s*"([^"]+)"/,
    /data-inventory\s*=\s*"([^"]+)"/,
    
    // Padr√µes de vari√°veis
    /var\s+products\s*=\s*(\[.*?\]);/,
    /var\s+catalog\s*=\s*(\[.*?\]);/,
    /var\s+inventory\s*=\s*(\[.*?\]);/,
    
    // Padr√µes de objetos JSON
    /"products":\s*(\[.*?\])/,
    /"items":\s*(\[.*?\])/,
    /"catalog":\s*(\[.*?\])/,
    /"inventory":\s*(\[.*?\])/,
    
    // Padr√µes espec√≠ficos do Vue.js
    /__NUXT__\s*=\s*({.*?});/,
    /__INITIAL_STATE__\s*=\s*({.*?});/,
    
    // Padr√µes de scripts inline
    /<script[^>]*>([^<]*products[^<]*)<\/script>/gi,
    /<script[^>]*>([^<]*catalog[^<]*)<\/script>/gi,
    /<script[^>]*>([^<]*inventory[^<]*)<\/script>/gi
  ];

  for (const pattern of patterns) {
    const match = html.match(pattern);
    if (match) {
      try {
        let data;
        if (pattern.source.includes('data-products') || pattern.source.includes('data-catalog') || pattern.source.includes('data-inventory')) {
          data = JSON.parse(decodeURIComponent(match[1]));
        } else {
          data = JSON.parse(match[1]);
        }
        
        if (data && (Array.isArray(data) || data.items || data.products || data.catalog || data.inventory)) {
          console.log('‚úÖ Dados extra√≠dos do HTML');
          const items = Array.isArray(data) ? data : (data.items || data.products || data.catalog || data.inventory || []);
          return { items };
        }
      } catch (e) {
        console.log('‚ùå Erro ao parsear dados do HTML');
      }
    }
  }
  
  // Se n√£o encontrou dados estruturados, tentar extrair da tabela HTML
  console.log('üîç Tentando extrair dados de tabelas HTML...');
  const tableData = extractTableData(html);
  if (tableData) {
    return tableData;
  }
  
  return null;
}

// Fun√ß√£o para extrair dados de tabelas HTML
function extractTableData(html) {
  try {
    // Procurar por tabelas com produtos
    const tableMatches = html.match(/<table[^>]*>([\s\S]*?)<\/table>/gi);
    if (tableMatches) {
      console.log(`üìã Encontradas ${tableMatches.length} tabelas`);
      
      const products = [];
      
      for (const table of tableMatches) {
        // Procurar por linhas da tabela
        const rowMatches = table.match(/<tr[^>]*>([\s\S]*?)<\/tr>/gi);
        if (rowMatches) {
          for (const row of rowMatches) {
            // Procurar por c√©lulas
            const cellMatches = row.match(/<td[^>]*>([\s\S]*?)<\/td>/gi);
            if (cellMatches && cellMatches.length > 2) {
              const product = {
                id: products.length + 1,
                descricao: cellMatches[0]?.replace(/<[^>]*>/g, '').trim() || '',
                preco: cellMatches[1]?.replace(/<[^>]*>/g, '').trim() || '',
                categoria: cellMatches[2]?.replace(/<[^>]*>/g, '').trim() || ''
              };
              products.push(product);
            }
          }
        }
      }
      
      if (products.length > 0) {
        console.log(`‚úÖ Extra√≠dos ${products.length} produtos de tabelas`);
        return { items: products };
      }
    }
  } catch (e) {
    console.log('‚ùå Erro ao extrair dados de tabelas');
  }
  
  return null;
}

// Fun√ß√£o para buscar produtos via web scraping
async function getProducts() {
  console.log('\nüì¶ === BUSCANDO PRODUTOS (WEB SCRAPING) ===');
  
  // Tentar diferentes p√°ginas que podem conter produtos
  const pages = [
    '/',
    '/app/#/produtos',
    '/app/#/catalogo',
    '/app/#/inventory',
    '/produtos',
    '/catalogo',
    '/inventory',
    '/app/#/',
    '/app/#/home',
    '/app/#/dashboard'
  ];

  for (const page of pages) {
    console.log(`\nüîç Tentando p√°gina: ${page}`);
    const result = await scrapePage(page);
    
    if (result.success) {
      console.log(`‚úÖ Sucesso com ${page}`);
      return result.data;
    }
    
    // Pausa entre tentativas
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  console.log('‚ùå Nenhuma p√°gina funcionou');
  return { items: [] };
}

// Fun√ß√£o para buscar se√ß√µes via web scraping
async function getSections() {
  console.log('\nüìÇ === BUSCANDO SE√á√ïES (WEB SCRAPING) ===');
  const result = await scrapePage('/app/#/secoes');
  return result.success ? result.data : { items: [] };
}

// Fun√ß√£o para buscar marcas via web scraping
async function getBrands() {
  console.log('\nüè∑Ô∏è === BUSCANDO MARCAS (WEB SCRAPING) ===');
  const result = await scrapePage('/app/#/marcas');
  return result.success ? result.data : { items: [] };
}

// Fun√ß√£o para buscar g√™neros via web scraping
async function getGenres() {
  console.log('\nüìö === BUSCANDO G√äNEROS (WEB SCRAPING) ===');
  const result = await scrapePage('/app/#/generos');
  return result.success ? result.data : { items: [] };
}

// Fun√ß√£o para buscar pre√ßos via web scraping
async function getPrices() {
  console.log('\nüí∞ === BUSCANDO PRE√áOS (WEB SCRAPING) ===');
  const result = await scrapePage('/app/#/precos');
  return result.success ? result.data : { items: [] };
}

// Fun√ß√£o para salvar dados
async function saveData(data) {
  const dataDir = path.join(__dirname, '..', 'data');
  
  try {
    await fs.mkdir(dataDir, { recursive: true });
  } catch (error) {
    // Diret√≥rio j√° existe
  }
  
  const filePath = path.join(dataDir, 'products.json');
  await fs.writeFile(filePath, JSON.stringify(data, null, 2));
  
  console.log(`üíæ Dados salvos em: ${filePath}`);
}

// Fun√ß√£o principal
async function sync() {
  console.log('üöÄ === SINCRONIZA√á√ÉO VAREJO F√ÅCIL (WEB SCRAPING) ===\n');
  
  try {
    const startTime = Date.now();
    
    // Obter sess√£o primeiro
    const sessionResult = await getSession();
    if (!sessionResult) {
      console.log('‚ùå N√£o foi poss√≠vel obter sess√£o');
      return;
    }
    
    // Buscar produtos
    const products = await getProducts();
    
    // Preparar dados para salvar
    const syncData = {
      lastSync: new Date().toISOString(),
      products: products.items || products.products || [],
      sections: [],
      brands: [],
      genres: [],
      prices: [],
      totalProducts: (products.items || products.products || []).length,
      totalSections: 0,
      totalBrands: 0,
      totalGenres: 0,
      totalPrices: 0
    };

    console.log(`‚úÖ ${syncData.totalProducts} produtos encontrados`);

    // Se encontrou produtos, tentar buscar outros dados
    if (syncData.totalProducts > 0) {
      console.log('\nüîÑ Buscando dados adicionais...');
      
      const [sections, brands, genres, prices] = await Promise.all([
        getSections(),
        getBrands(),
        getGenres(),
        getPrices()
      ]);

      syncData.sections = sections.items || [];
      syncData.brands = brands.items || [];
      syncData.genres = genres.items || [];
      syncData.prices = prices.items || [];
      
      syncData.totalSections = syncData.sections.length;
      syncData.totalBrands = syncData.brands.length;
      syncData.totalGenres = syncData.genres.length;
      syncData.totalPrices = syncData.prices.length;
    }

    // Salvar dados
    await saveData(syncData);

    const endTime = Date.now();
    const duration = Math.round((endTime - startTime) / 1000);

    console.log('\nüéâ === SINCRONIZA√á√ÉO CONCLU√çDA ===');
    console.log(`‚è±Ô∏è Tempo: ${duration} segundos`);
    console.log(`üì¶ Produtos: ${syncData.totalProducts}`);
    console.log(`üìÇ Se√ß√µes: ${syncData.totalSections}`);
    console.log(`üè∑Ô∏è Marcas: ${syncData.totalBrands}`);
    console.log(`üìö G√™neros: ${syncData.totalGenres}`);
    console.log(`üí∞ Pre√ßos: ${syncData.totalPrices}`);

    return syncData;

  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o:', error.message);
    throw error;
  }
}

// Fun√ß√£o para testar
async function test() {
  console.log('üß™ === TESTE DE WEB SCRAPING ===\n');
  
  try {
    // Obter sess√£o
    const sessionResult = await getSession();
    if (!sessionResult) {
      console.log('‚ùå N√£o foi poss√≠vel obter sess√£o');
      return;
    }
    
    // Testar scraping da p√°gina inicial
    console.log('\nüîç Testando scraping da p√°gina inicial...');
    const result = await scrapePage('/');
    
    if (result.success) {
      console.log('‚úÖ Web scraping funcionou!');
      console.log(`üì¶ ${result.data.items?.length || 0} produtos encontrados`);
    } else {
      console.log('‚ùå Web scraping n√£o funcionou');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

// Executar baseado no comando
const command = process.argv[2];

if (command === 'test') {
  test();
} else if (command === 'sync') {
  sync();
} else {
  console.log('Uso: node async-web-scraping.js [test|sync]');
  console.log('  test - Testar web scraping');
  console.log('  sync - Sincronizar dados via web scraping');
}

module.exports = { sync, test, getSession }; 