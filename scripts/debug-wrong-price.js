const fs = require('fs').promises
const path = require('path')

async function debugWrongPrice() {
  try {
    console.log('üîç Debugando pre√ßo errado do produto ID 5290...')
    
    const varejoFacilFilePath = path.join(process.cwd(), 'data', 'varejo-facil-sync.json')
    const varejoFacilData = await fs.readFile(varejoFacilFilePath, 'utf8')
    const data = JSON.parse(varejoFacilData)
    
    // Encontrar o produto ID 5290
    const product = data.rawProducts.find(p => p.id === 5290)
    if (!product) {
      console.log('‚ùå Produto ID 5290 n√£o encontrado')
      return
    }
    
    console.log('\nüì¶ PRODUTO ID 5290:')
    console.log('=' .repeat(50))
    console.log(`ID: ${product.id}`)
    console.log(`Nome: ${product.descricao}`)
    console.log(`C√≥digo Interno: "${product.codigoInterno}"`)
    console.log(`ID Externo: "${product.idExterno}"`)
    console.log(`Se√ß√£o ID: ${product.secaoId}`)
    console.log('=' .repeat(50))
    
    // Mostrar TODOS os pre√ßos que correspondem ao idExterno "undefined"
    const allPricesWithUndefined = data.prices.filter(p => p.idExterno === "undefined")
    console.log(`\nüìã TODOS os pre√ßos com idExterno "undefined" (${allPricesWithUndefined.length}):`)
    allPricesWithUndefined.slice(0, 10).forEach((price, index) => {
      console.log(`   ${index + 1}. ProdutoId: ${price.produtoId}, Pre√ßo: R$ ${price.precoVenda1}`)
    })
    
    // Mostrar o pre√ßo espec√≠fico que est√° sendo usado
    const priceUsed = data.prices.find(p => p.idExterno === product.idExterno)
    console.log(`\nüí∞ PRE√áO QUE EST√Å SENDO USADO:`)
    console.log(`   ProdutoId: ${priceUsed.produtoId}, Pre√ßo: R$ ${priceUsed.precoVenda1}`)
    
    // Verificar se h√° outros pre√ßos para o mesmo produto
    console.log(`\nüîç VERIFICANDO OUTROS PRE√áOS PARA O PRODUTO:`)
    
    // Buscar por produtoId
    const priceByProductId = data.prices.find(p => p.produtoId === 5290)
    if (priceByProductId) {
      console.log(`   ‚úÖ Encontrado por produtoId: R$ ${priceByProductId.precoVenda1}`)
    } else {
      console.log(`   ‚ùå Nenhum pre√ßo encontrado por produtoId 5290`)
    }
    
    // Buscar por c√≥digo interno
    const priceByCode = data.prices.find(p => p.codigoInterno === product.codigoInterno)
    if (priceByCode) {
      console.log(`   ‚úÖ Encontrado por c√≥digo interno: R$ ${priceByCode.precoVenda1}`)
    } else {
      console.log(`   ‚ùå Nenhum pre√ßo encontrado por c√≥digo interno`)
    }
    
    // Mostrar todos os pre√ßos que t√™m produtoId pr√≥ximo (para ver se h√° um padr√£o)
    console.log(`\nüìã PRE√áOS COM PRODUTOID PR√ìXIMO (5280-5300):`)
    const nearbyPrices = data.prices.filter(p => p.produtoId >= 5280 && p.produtoId <= 5300)
    nearbyPrices.forEach((price, index) => {
      console.log(`   ${index + 1}. ProdutoId: ${price.produtoId}, Pre√ßo: R$ ${price.precoVenda1}, ID Externo: "${price.idExterno}"`)
    })
    
  } catch (error) {
    console.error('‚ùå Erro ao debugar pre√ßo errado:', error)
  }
}

// Executar
debugWrongPrice()
