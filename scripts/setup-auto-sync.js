const fs = require('fs').promises
const path = require('path')

// Configura√ß√µes da API do Varejo F√°cil
const VAREJO_FACIL_CONFIG = {
  baseUrl: 'https://atacadaoguanabara.varejofacil.com',
  apiKey: '2625e98175832a17a954db9beb60306a',
  endpoints: {
    products: '/v1/produto/produtos',
    sections: '/v1/produto/secoes',
    brands: '/v1/produto/marcas',
    genres: '/v1/produto/generos',
    prices: '/v1/produto/precos',
    applications: '/v1/produto/aplicacoes',
    characteristics: '/v1/produto/caracteristicas',
    mix: '/v1/produto/mix',
    families: '/v1/produto/familias',
    auxiliaryCodes: '/v1/produto/codigos-auxiliares'
  }
}

// Fun√ß√£o para fazer requisi√ß√µes para a API do Varejo F√°cil
async function makeVarejoFacilRequest(endpoint, options = {}) {
  const url = `${VAREJO_FACIL_CONFIG.baseUrl}${endpoint}`
  
  const defaultHeaders = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${VAREJO_FACIL_CONFIG.apiKey}`,
    ...options.headers
  }

  const config = {
    ...options,
    headers: defaultHeaders
  }

  try {
    const response = await fetch(url, config)
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    return await response.json()
  } catch (error) {
    console.error(`Erro na requisi√ß√£o para ${endpoint}:`, error)
    throw error
  }
}

// Fun√ß√£o para buscar produtos
async function fetchProducts(params = {}) {
  const searchParams = new URLSearchParams()
  if (params.q) searchParams.append('q', params.q)
  if (params.sort) searchParams.append('sort', params.sort)
  if (params.start) searchParams.append('start', params.start.toString())
  if (params.count) searchParams.append('count', params.count.toString())

  const queryString = searchParams.toString()
  const endpoint = `${VAREJO_FACIL_CONFIG.endpoints.products}${queryString ? `?${queryString}` : ''}`
  
  return makeVarejoFacilRequest(endpoint)
}

// Fun√ß√£o para buscar se√ß√µes
async function fetchSections(params = {}) {
  const searchParams = new URLSearchParams()
  if (params.q) searchParams.append('q', params.q)
  if (params.sort) searchParams.append('sort', params.sort)
  if (params.start) searchParams.append('start', params.start.toString())
  if (params.count) searchParams.append('count', params.count.toString())

  const queryString = searchParams.toString()
  const endpoint = `${VAREJO_FACIL_CONFIG.endpoints.sections}${queryString ? `?${queryString}` : ''}`
  
  return makeVarejoFacilRequest(endpoint)
}

// Fun√ß√£o para buscar marcas
async function fetchBrands(params = {}) {
  const searchParams = new URLSearchParams()
  if (params.q) searchParams.append('q', params.q)
  if (params.sort) searchParams.append('sort', params.sort)
  if (params.start) searchParams.append('start', params.start.toString())
  if (params.count) searchParams.append('count', params.count.toString())

  const queryString = searchParams.toString()
  const endpoint = `${VAREJO_FACIL_CONFIG.endpoints.brands}${queryString ? `?${queryString}` : ''}`
  
  return makeVarejoFacilRequest(endpoint)
}

// Fun√ß√£o para buscar pre√ßos
async function fetchPrices(params = {}) {
  const searchParams = new URLSearchParams()
  if (params.q) searchParams.append('q', params.q)
  if (params.sort) searchParams.append('sort', params.sort)
  if (params.start) searchParams.append('start', params.start.toString())
  if (params.count) searchParams.append('count', params.count.toString())

  const queryString = searchParams.toString()
  const endpoint = `${VAREJO_FACIL_CONFIG.endpoints.prices}${queryString ? `?${queryString}` : ''}`
  
  return makeVarejoFacilRequest(endpoint)
}

// Fun√ß√£o para salvar dados em arquivo JSON
async function saveToJsonFile(data, filename) {
  const dataDir = path.join(__dirname, '..', 'data')
  
  // Criar diret√≥rio se n√£o existir
  try {
    await fs.access(dataDir)
  } catch {
    await fs.mkdir(dataDir, { recursive: true })
  }
  
  const filePath = path.join(dataDir, filename)
  await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf8')
  console.log(`‚úÖ Dados salvos em: ${filePath}`)
}

// Fun√ß√£o principal de sincroniza√ß√£o
async function syncVarejoFacilData() {
  console.log('üîÑ Iniciando sincroniza√ß√£o com Varejo F√°cil...')
  
  try {
    // Buscar produtos
    console.log('üì¶ Buscando produtos...')
    const productsResponse = await fetchProducts({ count: 1000 })
    await saveToJsonFile(productsResponse, 'varejo-facil-products.json')
    console.log(`‚úÖ ${productsResponse.items?.length || 0} produtos encontrados`)

    // Buscar se√ß√µes
    console.log('üìÇ Buscando se√ß√µes...')
    const sectionsResponse = await fetchSections({ count: 1000 })
    await saveToJsonFile(sectionsResponse, 'varejo-facil-sections.json')
    console.log(`‚úÖ ${sectionsResponse.items?.length || 0} se√ß√µes encontradas`)

    // Buscar marcas
    console.log('üè∑Ô∏è Buscando marcas...')
    const brandsResponse = await fetchBrands({ count: 1000 })
    await saveToJsonFile(brandsResponse, 'varejo-facil-brands.json')
    console.log(`‚úÖ ${brandsResponse.items?.length || 0} marcas encontradas`)

    // Buscar pre√ßos
    console.log('üí∞ Buscando pre√ßos...')
    const pricesResponse = await fetchPrices({ count: 1000 })
    await saveToJsonFile(pricesResponse, 'varejo-facil-prices.json')
    console.log(`‚úÖ ${pricesResponse.items?.length || 0} pre√ßos encontrados`)

    // Criar arquivo de resumo
    const summary = {
      timestamp: new Date().toISOString(),
      totalProducts: productsResponse.items?.length || 0,
      totalSections: sectionsResponse.items?.length || 0,
      totalBrands: brandsResponse.items?.length || 0,
      totalPrices: pricesResponse.items?.length || 0,
      status: 'success'
    }
    
    await saveToJsonFile(summary, 'varejo-facil-sync-summary.json')
    
    console.log('üéâ Sincroniza√ß√£o conclu√≠da com sucesso!')
    console.log(`üìä Resumo: ${summary.totalProducts} produtos, ${summary.totalSections} se√ß√µes, ${summary.totalBrands} marcas, ${summary.totalPrices} pre√ßos`)
    
    return summary
    
  } catch (error) {
    console.error('‚ùå Erro durante a sincroniza√ß√£o:', error)
    
    const errorSummary = {
      timestamp: new Date().toISOString(),
      status: 'error',
      error: error.message
    }
    
    await saveToJsonFile(errorSummary, 'varejo-facil-sync-error.json')
    throw error
  }
}

// Fun√ß√£o para sincroniza√ß√£o cont√≠nua
async function startContinuousSync(intervalMinutes = 30) {
  console.log(`üîÑ Iniciando sincroniza√ß√£o cont√≠nua (intervalo: ${intervalMinutes} minutos)`)
  
  // Executar sincroniza√ß√£o inicial
  await syncVarejoFacilData()
  
  // Configurar sincroniza√ß√£o peri√≥dica
  setInterval(async () => {
    console.log(`\nüîÑ Executando sincroniza√ß√£o programada...`)
    try {
      await syncVarejoFacilData()
    } catch (error) {
      console.error('‚ùå Erro na sincroniza√ß√£o programada:', error)
    }
  }, intervalMinutes * 60 * 1000)
  
  console.log(`‚è∞ Pr√≥xima sincroniza√ß√£o em ${intervalMinutes} minutos`)
}

// Fun√ß√£o para sincroniza√ß√£o √∫nica
async function runSingleSync() {
  try {
    await syncVarejoFacilData()
    process.exit(0)
  } catch (error) {
    console.error('‚ùå Falha na sincroniza√ß√£o:', error)
    process.exit(1)
  }
}

// Verificar argumentos da linha de comando
const args = process.argv.slice(2)

if (args.includes('--continuous') || args.includes('-c')) {
  const interval = parseInt(args.find(arg => arg.startsWith('--interval='))?.split('=')[1]) || 30
  startContinuousSync(interval)
} else if (args.includes('--help') || args.includes('-h')) {
  console.log(`
üîÑ Script de Sincroniza√ß√£o Varejo F√°cil

Uso:
  node setup-auto-sync.js                    # Sincroniza√ß√£o √∫nica
  node setup-auto-sync.js --continuous       # Sincroniza√ß√£o cont√≠nua (30 min)
  node setup-auto-sync.js -c --interval=60   # Sincroniza√ß√£o cont√≠nua (60 min)
  node setup-auto-sync.js --help             # Mostrar esta ajuda

Op√ß√µes:
  --continuous, -c        Executar sincroniza√ß√£o cont√≠nua
  --interval=<minutos>    Intervalo em minutos para sincroniza√ß√£o cont√≠nua
  --help, -h             Mostrar esta ajuda

Arquivos gerados:
  - varejo-facil-products.json
  - varejo-facil-sections.json
  - varejo-facil-brands.json
  - varejo-facil-prices.json
  - varejo-facil-sync-summary.json
  - varejo-facil-sync-error.json (em caso de erro)
`)
} else {
  runSingleSync()
}

module.exports = {
  syncVarejoFacilData,
  startContinuousSync,
  runSingleSync
} 