// Script Async para Varejo F√°cil - Vers√£o Simplificada
const fs = require('fs').promises;
const path = require('path');

// Configura√ß√µes
const VAREJO_FACIL_CONFIG = {
  baseUrl: 'https://atacadaoguanabara.varejofacil.com',
  apiKey: '2625e98175832a17a954db9beb60306a'
};

// Fun√ß√£o para fazer requisi√ß√£o simples
async function makeRequest(endpoint, options = {}) {
  const url = `${VAREJO_FACIL_CONFIG.baseUrl}${endpoint}`;
  
  const requestOptions = {
    method: options.method || 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': `Bearer ${VAREJO_FACIL_CONFIG.apiKey}`,
      ...options.headers
    }
  };

  if (options.body) {
    requestOptions.body = JSON.stringify(options.body);
  }

  try {
    console.log(`üåê Fazendo requisi√ß√£o: ${url}`);
    const response = await fetch(url, requestOptions);
    
    console.log(`üìä Status: ${response.status}`);
    
    const contentType = response.headers.get('content-type');
    
    if (contentType && contentType.includes('application/json')) {
      const data = await response.json();
      return { success: true, data };
    } else {
      const text = await response.text();
      console.log(`üìÑ Resposta n√£o √© JSON: ${text.substring(0, 200)}`);
      return { success: false, error: 'Resposta n√£o √© JSON', text };
    }
  } catch (error) {
    console.error(`‚ùå Erro: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o para buscar produtos
async function getProducts() {
  console.log('üì¶ Buscando produtos...');
  
  // Tentar diferentes endpoints
  const endpoints = [
    '/v1/produto/produtos',
    '/api/produtos',
    '/api/v1/produtos',
    '/produtos'
  ];

  for (const endpoint of endpoints) {
    console.log(`üîç Tentando: ${endpoint}`);
    const result = await makeRequest(endpoint);
    
    if (result.success && result.data) {
      console.log(`‚úÖ Sucesso com ${endpoint}`);
      return result.data;
    }
  }
  
  throw new Error('Nenhum endpoint funcionou');
}

// Fun√ß√£o para buscar se√ß√µes
async function getSections() {
  console.log('üìÇ Buscando se√ß√µes...');
  const result = await makeRequest('/v1/produto/secoes');
  return result.success ? result.data : { items: [] };
}

// Fun√ß√£o para buscar marcas
async function getBrands() {
  console.log('üè∑Ô∏è Buscando marcas...');
  const result = await makeRequest('/v1/produto/marcas');
  return result.success ? result.data : { items: [] };
}

// Fun√ß√£o para buscar g√™neros
async function getGenres() {
  console.log('üìö Buscando g√™neros...');
  const result = await makeRequest('/v1/produto/generos');
  return result.success ? result.data : { items: [] };
}

// Fun√ß√£o para buscar pre√ßos
async function getPrices() {
  console.log('üí∞ Buscando pre√ßos...');
  const result = await makeRequest('/v1/produto/precos');
  return result.success ? result.data : { items: [] };
}

// Fun√ß√£o para salvar dados
async function saveData(data) {
  const dataDir = path.join(__dirname, '..', 'data');
  
  try {
    await fs.mkdir(dataDir, { recursive: true });
  } catch (error) {
    // Diret√≥rio j√° existe
  }
  
  const filePath = path.join(dataDir, 'products.json');
  await fs.writeFile(filePath, JSON.stringify(data, null, 2));
  
  console.log(`üíæ Dados salvos em: ${filePath}`);
}

// Fun√ß√£o principal de sincroniza√ß√£o
async function syncVarejoFacil() {
  console.log('üöÄ Iniciando sincroniza√ß√£o do Varejo F√°cil...\n');
  
  try {
    const syncData = {
      lastSync: new Date().toISOString(),
      products: [],
      sections: [],
      brands: [],
      genres: [],
      prices: [],
      totalProducts: 0,
      totalSections: 0,
      totalBrands: 0,
      totalGenres: 0,
      totalPrices: 0
    };

    // Buscar todos os dados
    const [products, sections, brands, genres, prices] = await Promise.all([
      getProducts(),
      getSections(),
      getBrands(),
      getGenres(),
      getPrices()
    ]);

    // Processar produtos
    if (products && products.items) {
      syncData.products = products.items;
      syncData.totalProducts = products.items.length;
      console.log(`‚úÖ ${syncData.totalProducts} produtos encontrados`);
    }

    // Processar se√ß√µes
    if (sections && sections.items) {
      syncData.sections = sections.items;
      syncData.totalSections = sections.items.length;
      console.log(`‚úÖ ${syncData.totalSections} se√ß√µes encontradas`);
    }

    // Processar marcas
    if (brands && brands.items) {
      syncData.brands = brands.items;
      syncData.totalBrands = brands.items.length;
      console.log(`‚úÖ ${syncData.totalBrands} marcas encontradas`);
    }

    // Processar g√™neros
    if (genres && genres.items) {
      syncData.genres = genres.items;
      syncData.totalGenres = genres.items.length;
      console.log(`‚úÖ ${syncData.totalGenres} g√™neros encontrados`);
    }

    // Processar pre√ßos
    if (prices && prices.items) {
      syncData.prices = prices.items;
      syncData.totalPrices = prices.items.length;
      console.log(`‚úÖ ${syncData.totalPrices} pre√ßos encontrados`);
    }

    // Salvar dados
    await saveData(syncData);

    console.log('\nüéâ Sincroniza√ß√£o conclu√≠da com sucesso!');
    console.log(`üìä Resumo:`);
    console.log(`   - Produtos: ${syncData.totalProducts}`);
    console.log(`   - Se√ß√µes: ${syncData.totalSections}`);
    console.log(`   - Marcas: ${syncData.totalBrands}`);
    console.log(`   - G√™neros: ${syncData.totalGenres}`);
    console.log(`   - Pre√ßos: ${syncData.totalPrices}`);

    return syncData;

  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o:', error.message);
    throw error;
  }
}

// Fun√ß√£o para testar conex√£o
async function testConnection() {
  console.log('üß™ Testando conex√£o com Varejo F√°cil...\n');
  
  try {
    const result = await makeRequest('/v1/produto/produtos');
    
    if (result.success) {
      console.log('‚úÖ Conex√£o funcionando!');
      console.log(`üì¶ Produtos encontrados: ${result.data.items?.length || 0}`);
      return true;
    } else {
      console.log('‚ùå Conex√£o falhou');
      console.log(`üìÑ Resposta: ${result.text?.substring(0, 200)}`);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'test':
      await testConnection();
      break;
    case 'sync':
      await syncVarejoFacil();
      break;
    default:
      console.log('Uso: node async-varejo-facil.js [test|sync]');
      console.log('  test - Testar conex√£o');
      console.log('  sync - Sincronizar dados');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  syncVarejoFacil,
  testConnection,
  makeRequest
}; 